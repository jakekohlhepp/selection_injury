vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 1/100*log(1+E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 1/10000*log(1+E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 100*log(1+E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 2*log(1+E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
hist(log(E(igraph_mat)$weight))
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = E(igraph_mat)$weight>1,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = E(igraph_mat)$weight>3,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = log(E(igraph_mat)$weight)>1,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = log(E(igraph_mat)$weight)>4,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
log(E(igraph_mat)$weight)
is.finite(log(E(igraph_mat)$weight))
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = log(1+E(igraph_mat)$weight)>4,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = E(igraph_mat)$weight>8,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = E(igraph_mat)$weight>20,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
E(igraph_mat)$weight>20
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>20),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>10000),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>10000),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>10000),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>10000),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 1,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 0,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 100,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 10*as.numeric(E(igraph_mat)$weight>10000),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 10*as.numeric(E(igraph_mat)$weight>1),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 10*as.numeric(E(igraph_mat)$weight>2),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>2),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>8),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>10),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>40),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>100),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>10000),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>1000000000),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>100000000000),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
sum(E(igraph_mat)$weight>100000000000)
sum(E(igraph_mat)$weight>1)
sum(E(igraph_mat)$weight>100)
sum(E(igraph_mat)$weight>10)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 4*as.numeric(E(igraph_mat)$weight>10),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 2*as.numeric(E(igraph_mat)$weight>10),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>10),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>40),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>20),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=10, charge=0.02, spring.length = 5, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>20),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.1, spring.length = 5, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>20),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>0),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>30),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>4),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 10*as.numeric(E(igraph_mat)$weight>4),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 0.5*as.numeric(E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 0.1*as.numeric(E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 0.01*as.numeric(E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = 0.001*as.numeric(E(igraph_mat)$weight),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.02, spring.length = 5, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>20),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>20),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.01, spring.length = 5, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
edge.width = as.numeric(E(igraph_mat)$weight>20),
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.02, spring.length = 5, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.02, spring.length = 10, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.02, spring.length = 5, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.5, spring.length = 5, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.01, spring.length = 5, spring=5)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
### visualize the network of officers
library('data.table')
library('lubridate')
library('kableExtra')
library('igraph')
library('qgraph')
library('ggplot2')
library('fixest')
data<-fread('mkdata/data/01_03_pre_network.csv')
data[, analysis_workdate:=dmy(analysis_workdate)]
### for each employee with an exposure variable, zero this variable for all dates after their termination
data[, num_emp1:=as.integer(gsub("EMPLOYEE ", "",employee_name))]
## total number of people with ot on each day
data[, ot_work:= varot_hours>0, by="analysis_workdate"]
hist(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(ot_work)), by="num_emp1"]$V1)
hist(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(ot_work)), by="num_emp1"]$ot_tot)
as.Date('2016-09-01')-as.Date('2015-01-01')
ggplot(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(ot_work)), by="num_emp1"], aes(x=ot_tot))+geom_histogram()
data
ggplot(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(ot_work)), by="num_emp1"], aes(x=ot_tot))+geom_histogram(bins=100)
data[, normal_work:= tot_hours>0]
ggplot(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(tot_hours)), by="num_emp1"], aes(x=ot_tot))+geom_histogram(bins=100)
ggplot(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(normal_work)), by="num_emp1"], aes(x=ot_tot))+geom_histogram(bins=100)
ggplot(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(ot_work)), by="num_emp1"], aes(x=ot_tot))+geom_histogram(bins=100)
### visualize the network of officers
library('data.table')
library('lubridate')
library('kableExtra')
library('igraph')
library('qgraph')
library('ggplot2')
library('fixest')
data<-fread('mkdata/data/01_03_pre_network.csv')
data[, analysis_workdate:=dmy(analysis_workdate)]
### for each employee with an exposure variable, zero this variable for all dates after their termination
data[, num_emp1:=as.integer(gsub("EMPLOYEE ", "",employee_name))]
## total number of people with ot on each day
data[, ot_work:= varot_hours>0]
data[, normal_work:= tot_hours>0]
## collapsed
ggplot(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(ot_work)), by="num_emp1"], aes(x=ot_tot))+geom_histogram()
data[, tot_ot:= sum(ot_work), by="analysis_workdate"]
melt_data<-melt(data, id.vars=c("num_emp1", "analysis_workdate"),
measure.vars=colnames(data)[grep("exposure",colnames(data))])
melt_data[, num_emp2:=as.integer(gsub("exposure", "",variable))]
all_pairs<-data[,do.call(CJ, list(num_emp1, num_emp1) ),by=c("analysis_workdate")]
setnames(all_pairs, old=c("V1", "V2"), new=c("num_emp1", "num_emp2"))
all_pairs<-merge(all_pairs,melt_data, all.x=TRUE, by=c("num_emp1", "num_emp2","analysis_workdate") )
all_pairs[is.na(value), value:=0]
## zero self-links
all_pairs[num_emp1==num_emp2, value:=0]
setkey(all_pairs,"analysis_workdate","num_emp1", "num_emp2")
all_pairs<-dcast(all_pairs, analysis_workdate+num_emp1~num_emp2, value.var ="value")
all_pairs<-merge(all_pairs, data[,c("num_emp1","analysis_workdate", "tot_hours", "leave_hours","matched_injury", "tot_ot","ot_work")], by=c("num_emp1","analysis_workdate"), all.x=TRUE)
### for each date starting 01jan2015 compute centrality
makeit<-function(x){
cols_keep<-as.character(x$num_emp1)
qgraph_mat<-as.matrix(x[,.SD, .SDcols= cols_keep ])
rownames(qgraph_mat)<-as.character(x$num_emp1)
colnames(qgraph_mat)<-colnames(x[,.SD, .SDcols= cols_keep ])
stopifnot(ncol(qgraph_mat)==nrow(qgraph_mat))
igraph_mat<-graph_from_adjacency_matrix(qgraph_mat, mode="undirected", weighted=TRUE)
eigen_centrality(largest_component(igraph_mat))->temp
res<-temp$vector[as.character(x$num_emp1)]
res[is.na(res)]<-0
return(res)
}
makeit_degree<-function(x){
cols_keep<-as.character(x$num_emp1)
qgraph_mat<-as.matrix(x[,.SD, .SDcols= cols_keep ])
rownames(qgraph_mat)<-as.character(x$num_emp1)
colnames(qgraph_mat)<-colnames(x[,.SD, .SDcols= cols_keep ])
stopifnot(ncol(qgraph_mat)==nrow(qgraph_mat))
qgraph_obj<-qgraph(qgraph_mat,DoNotPlot=TRUE)
qgraph_obj<-centrality(qgraph_obj)
return(qgraph_obj$InDegree)
}
all_pairs[, day:=weekdays(analysis_workdate)]
all_pairs[, dw:=as.factor(weekdays(analysis_workdate))]
all_pairs[, eigen_cent:=makeit(.SD),.SDcols=c(colnames(all_pairs)[grep("^[0-9]+$",colnames(all_pairs))],"num_emp1"), by="analysis_workdate"]
all_pairs[, degree:=makeit_degree(.SD),.SDcols=c(colnames(all_pairs)[grep("^[0-9]+$",colnames(all_pairs))],"num_emp1"), by="analysis_workdate"]
all_pairs[,work:=tot_hours>0]
setkey(all_pairs, "num_emp1", "analysis_workdate")
all_pairs[,l_eigen_cent:=shift(eigen_cent), by="num_emp1"]
all_pairs[,l_degree:=shift(degree), by="num_emp1"]
## compute total number of people with ot hours on date
### special events
library('stringr')
special<-fread('mkdata/20250207_bss_special_events/Building_and_Safety_Temporary_Special_Event__TSE__Permits_20250207.csv')
## process start and end date and expand
special[, analysis_workdate:=mdy(`Event Start Date`)]
#special[, end_date:=mdy(`Event End Date`)]
#special<-special[, .(analysis_workdate=start_date:end_date), by=eval(colnames(special))]
#special<-special[`Permit Sub-Type`=="Public Way"]
special<-special[, .(events=uniqueN(`PCIS Permit #`)), by="analysis_workdate"]
all_pairs<-merge(all_pairs,special, by="analysis_workdate", all.x=TRUE )
all_pairs[is.na(events), events:=0]
all_pairs[, bartik:=tot_ot*l_degree]
all_pairs[,s_bartik:=bartik/sd(bartik, na.rm=TRUE)]
all_pairs[,s_work:=work/sd(work, na.rm=TRUE)]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_bartik|analysis_workdate+num_emp1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~l_degree|analysis_workdate+num_emp1))
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),s_degree:=l_degree/sd(l_degree, na.rm=TRUE)]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree|analysis_workdate+num_emp1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree|num_emps1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree|num_emp1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree|analysis_workdate))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree+tot_ot|analysis_workdate))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree+tot_ot))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree+tot_ot|num_emp1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree+tot_ot+z_bar))
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z_bar:=mean(s_degree), by="num_emp1"]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_degree+tot_ot+z_bar))
denyprobit <- glm(ot_work~s_bartik+z_bar,
family = binomial(link = "probit"),
data = as.data.frame(all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),]))
cplot(denyprobit, x="s_bartik", type="response")
library(margins) ## Library not found
denyprobit <- glm(ot_work~s_bartik+z_bar,
family = binomial(link = "probit"),
data = as.data.frame(all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),]))
cplot(denyprobit, x="s_bartik", type="response")
denyprobit <- glm(ot_work~s_degree+z_bar+tot_ot,
family = binomial(link = "probit"),
data = as.data.frame(all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),]))
cplot(denyprobit, x="s_bartik", type="response")
denyprobit <- glm(ot_work~s_degree+z_bar+tot_ot,
family = binomial(link = "probit"),
data = as.data.frame(all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),]))
cplot(denyprobit, x="s_degree", type="response")
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z_bar:=mean(s_bartik), by="num_emp1"]
denyprobit <- glm(ot_work~s_bartik+z_bar,
family = binomial(link = "probit"),
data = as.data.frame(all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),]))
cplot(denyprobit, x="s_bartik", type="response")
denyprobit <- glm(ot_work~s_bartik+z_bar+tot_ot,
family = binomial(link = "probit"),
data = as.data.frame(all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),]))
cplot(denyprobit, x="s_bartik", type="response")
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),tot_degree:=sum(s_degree), by="analysis_workdate"]
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z:=l_degree/tot_degree]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~z+z_bar))
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z:=z*tot_ot]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~z+z_bar))
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z_bar:=mean(z), by="num_emp1"]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~z+z_bar))
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),s_z:=z/sd(z)]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~z+z_bar))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_z+z_bar))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_z))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_z|num_emp1))
denyprobit <- glm(ot_work~s_z+z_bar,
family = binomial(link = "probit"),
data = as.data.frame(all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),]))
cplot(denyprobit, x="s_z", type="response")
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z:=l_degree/sum(l_degree)*tot_ot, by="analysis_workdate"]
### visualize the network of officers
library('data.table')
library('lubridate')
library('kableExtra')
library('igraph')
library('qgraph')
library('ggplot2')
library('fixest')
data<-fread('mkdata/data/01_03_pre_network.csv')
data[, analysis_workdate:=dmy(analysis_workdate)]
### for each employee with an exposure variable, zero this variable for all dates after their termination
data[, num_emp1:=as.integer(gsub("EMPLOYEE ", "",employee_name))]
## total number of people with ot on each day
data[, ot_work:= varot_hours>0]
data[, normal_work:= tot_hours>0]
## collapsed
ggplot(data[analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<as.Date('2016-09-01'), .(ot_tot=sum(ot_work)), by="num_emp1"], aes(x=ot_tot))+geom_histogram()
data[, tot_ot:= sum(ot_work), by="analysis_workdate"]
melt_data<-melt(data, id.vars=c("num_emp1", "analysis_workdate"),
measure.vars=colnames(data)[grep("exposure",colnames(data))])
melt_data[, num_emp2:=as.integer(gsub("exposure", "",variable))]
all_pairs<-data[,do.call(CJ, list(num_emp1, num_emp1) ),by=c("analysis_workdate")]
setnames(all_pairs, old=c("V1", "V2"), new=c("num_emp1", "num_emp2"))
all_pairs<-merge(all_pairs,melt_data, all.x=TRUE, by=c("num_emp1", "num_emp2","analysis_workdate") )
all_pairs[is.na(value), value:=0]
## zero self-links
all_pairs[num_emp1==num_emp2, value:=0]
setkey(all_pairs,"analysis_workdate","num_emp1", "num_emp2")
all_pairs<-dcast(all_pairs, analysis_workdate+num_emp1~num_emp2, value.var ="value")
all_pairs<-merge(all_pairs, data[,c("num_emp1","analysis_workdate", "tot_hours", "leave_hours","matched_injury", "tot_ot","ot_work")], by=c("num_emp1","analysis_workdate"), all.x=TRUE)
### for each date starting 01jan2015 compute centrality
makeit<-function(x){
cols_keep<-as.character(x$num_emp1)
qgraph_mat<-as.matrix(x[,.SD, .SDcols= cols_keep ])
rownames(qgraph_mat)<-as.character(x$num_emp1)
colnames(qgraph_mat)<-colnames(x[,.SD, .SDcols= cols_keep ])
stopifnot(ncol(qgraph_mat)==nrow(qgraph_mat))
igraph_mat<-graph_from_adjacency_matrix(qgraph_mat, mode="undirected", weighted=TRUE)
eigen_centrality(largest_component(igraph_mat))->temp
res<-temp$vector[as.character(x$num_emp1)]
res[is.na(res)]<-0
return(res)
}
makeit_degree<-function(x){
cols_keep<-as.character(x$num_emp1)
qgraph_mat<-as.matrix(x[,.SD, .SDcols= cols_keep ])
rownames(qgraph_mat)<-as.character(x$num_emp1)
colnames(qgraph_mat)<-colnames(x[,.SD, .SDcols= cols_keep ])
stopifnot(ncol(qgraph_mat)==nrow(qgraph_mat))
qgraph_obj<-qgraph(qgraph_mat,DoNotPlot=TRUE)
qgraph_obj<-centrality(qgraph_obj)
return(qgraph_obj$InDegree)
}
all_pairs[, day:=weekdays(analysis_workdate)]
all_pairs[, dw:=as.factor(weekdays(analysis_workdate))]
all_pairs[, eigen_cent:=makeit(.SD),.SDcols=c(colnames(all_pairs)[grep("^[0-9]+$",colnames(all_pairs))],"num_emp1"), by="analysis_workdate"]
all_pairs[, degree:=makeit_degree(.SD),.SDcols=c(colnames(all_pairs)[grep("^[0-9]+$",colnames(all_pairs))],"num_emp1"), by="analysis_workdate"]
all_pairs[,work:=tot_hours>0]
setkey(all_pairs, "num_emp1", "analysis_workdate")
all_pairs[,l_eigen_cent:=shift(eigen_cent), by="num_emp1"]
all_pairs[,l_degree:=shift(degree), by="num_emp1"]
## compute total number of people with ot hours on date
### special events
library('stringr')
special<-fread('mkdata/20250207_bss_special_events/Building_and_Safety_Temporary_Special_Event__TSE__Permits_20250207.csv')
## process start and end date and expand
special[, analysis_workdate:=mdy(`Event Start Date`)]
#special[, end_date:=mdy(`Event End Date`)]
#special<-special[, .(analysis_workdate=start_date:end_date), by=eval(colnames(special))]
#special<-special[`Permit Sub-Type`=="Public Way"]
special<-special[, .(events=uniqueN(`PCIS Permit #`)), by="analysis_workdate"]
all_pairs<-merge(all_pairs,special, by="analysis_workdate", all.x=TRUE )
all_pairs[is.na(events), events:=0]
all_pairs[, bartik:=tot_ot*l_degree]
all_pairs[,s_bartik:=bartik/sd(bartik, na.rm=TRUE)]
all_pairs[,s_work:=work/sd(work, na.rm=TRUE)]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~s_bartik|analysis_workdate+num_emp1))
binsreg::binsreg(ot_work,bartik,w=~as.factor(num_emp1)+dw, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z:=l_degree/sum(l_degree)*tot_ot, by="analysis_workdate"]
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),s_z:=z/sd(z)]
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z_bar:=mean(bartik), by="num_emp1"]
denyprobit <- glm(ot_work~s_bartik+z_bar,
family = binomial(link = "probit"),
data = as.data.frame(all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),]))
cplot(denyprobit, x="s_bartik", type="response")
library(margins) ## Library not found
binsreg::binsreg(ot_work,l_degree, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z:=l_degree/sum(l_degree)*tot_ot, by="analysis_workdate"]
binsreg::binsreg(ot_work,z, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z:=l_degree/sum(l_degree), by="analysis_workdate"]
binsreg::binsreg(ot_work,z, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z_bar:=mean(z), by="num_emp1"]
binsreg::binsreg(ot_work,z,w=~z_bar, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z:=l_degree/sum(l_degree)*tot_ot, by="analysis_workdate"]
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z_bar:=mean(z), by="num_emp1"]
binsreg::binsreg(ot_work,z,w=~z_bar, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z:=l_degree/sum(l_degree), by="analysis_workdate"]
binsreg::binsreg(ot_work,z, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
binsreg::binsreg(ot_work,z,w=as.factor(num_emp1), data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
binsreg::binsreg(ot_work,z,w=~as.factor(num_emp1), data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),z_bar:=mean(z), by="num_emp1"]
binsreg::binsreg(ot_work,z,w=~z_bar, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-02-01'),], randcut=1)
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~z|analysis_workdate+num_emp1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~z))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~z|num_emp1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-06-01'),], ot_work~z+z_bar))
binsreg::binsreg(ot_work,bartik,w=~as.factor(num_emp1)+dw, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),], randcut=1)
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),], ot_work~s_bartik|analysis_workdate+num_emp1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),], ot_work~z|num_emp1))
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),], ot_work~z+z_bar))
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),z:=l_degree/sum(l_degree)*tot_ot, by="analysis_workdate"]
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),s_z:=z/sd(z)]
all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),z_bar:=mean(z), by="num_emp1"]
summary(feols(data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),], ot_work~z+z_bar))
binsreg::binsreg(ot_work,bartik,w=~z_bar, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),], randcut=1)
binsreg::binsreg(ot_work,z,w=~z_bar, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),], randcut=1)
first_stage_res<-feglm(ot_work~s_bartik+z_bar|analysis_workdate,data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),],
family="binomial")
start_date<-as.Date('2015-01-01')
cutdate<-as.Date('2015-03-01')
snapshot<-all_pairs[analysis_workdate==start_date-1,.SD, .SDcols=c(colnames(all_pairs)[grep("^[0-9]+$",colnames(all_pairs))],"num_emp1")]
cols_keep<-as.character(snapshot$num_emp1)
qgraph_mat<-as.matrix(snapshot[,.SD, .SDcols= cols_keep ])
rownames(qgraph_mat)<-as.character(snapshot$num_emp1)
colnames(qgraph_mat)<-colnames(snapshot[,.SD, .SDcols= cols_keep ])
stopifnot(ncol(qgraph_mat)==nrow(qgraph_mat))
qgraph_obj<-qgraph(qgraph_mat,DoNotPlot=TRUE)
hold<-all_pairs[analysis_workdate>=start_date & analysis_workdate<=cutdate,.(tot_ot=sum(ot_work)), by="num_emp1"]
ot_prob<-as.numeric(hold$tot_ot)
names(ot_prob)<-as.character(hold$num_emp1)
igraph_mat<-graph_from_adjacency_matrix(qgraph_mat, mode="undirected", weighted=TRUE)
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.01, spring.length = 5, spring=5)
colfunc <- colorRampPalette(c("white", "darkred"))
nodecolor<-colfunc(uniqueN(ot_prob))
names(nodecolor)<-as.character(unique(sort(ot_prob)))
nodecolor<-nodecolor[as.character(ot_prob)]
names(nodecolor)<-as.character(hold$num_emp1)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
binsreg::binsreg(ot_work,l_eigen_cent,w=~as.factor(num_emp1)+dw, data=all_pairs[(leave_hours==0 | tot_hours>0) & analysis_workdate>=as.Date('2015-01-01') & analysis_workdate<=as.Date('2015-03-01'),], randcut=1)
qgraph_mat
diag(qgraph_mat)
stopifnot(diag(qgraph_mat)==0)
median(qgraph_mat)
quantile(qgraph_mat)
upper(qgraph_mat)
lower.tri(qgraph_mat)
quantile(qgraph_mat[lower.tri(qgraph_mat)],0.75)
quantile(qgraph_mat[lower.tri(qgraph_mat)],0.9)
quantile(qgraph_mat[lower.tri(qgraph_mat)],0.95)
qgraph_mat[lower.tri(qgraph_mat)]>=quantile(qgraph_mat[lower.tri(qgraph_mat)],0.95)
qgraph_mat[lower.tri(qgraph_mat)]<-qgraph_mat[lower.tri(qgraph_mat)]>=quantile(qgraph_mat[lower.tri(qgraph_mat)],0.95)
qgraph_mat[upper.tri(qgraph_mat)]<-qgraph_mat[upper.tri(qgraph_mat)]>=quantile(qgraph_mat[upper.tri(qgraph_mat)],0.95)
snapshot<-all_pairs[analysis_workdate==start_date-1,.SD, .SDcols=c(colnames(all_pairs)[grep("^[0-9]+$",colnames(all_pairs))],"num_emp1")]
cols_keep<-as.character(snapshot$num_emp1)
qgraph_mat<-as.matrix(snapshot[,.SD, .SDcols= cols_keep ])
stopifnot(diag(qgraph_mat)==0)
## only keep above 75th percentile links
qgraph_mat[lower.tri(qgraph_mat)]<-qgraph_mat[lower.tri(qgraph_mat)]>=quantile(qgraph_mat[lower.tri(qgraph_mat)],0.95)
qgraph_mat[upper.tri(qgraph_mat)]<-qgraph_mat[upper.tri(qgraph_mat)]>=quantile(qgraph_mat[upper.tri(qgraph_mat)],0.95)
rownames(qgraph_mat)<-as.character(snapshot$num_emp1)
colnames(qgraph_mat)<-colnames(snapshot[,.SD, .SDcols= cols_keep ])
stopifnot(ncol(qgraph_mat)==nrow(qgraph_mat))
qgraph_obj<-qgraph(qgraph_mat,DoNotPlot=TRUE)
hold<-all_pairs[analysis_workdate>=start_date & analysis_workdate<=cutdate,.(tot_ot=sum(ot_work)), by="num_emp1"]
ot_prob<-as.numeric(hold$tot_ot)
names(ot_prob)<-as.character(hold$num_emp1)
igraph_mat<-graph_from_adjacency_matrix(qgraph_mat, mode="undirected", weighted=TRUE)
lay_try<-layout_with_graphopt(igraph_mat, mass=1000, charge=0.01, spring.length = 5, spring=5)
colfunc <- colorRampPalette(c("white", "darkred"))
nodecolor<-colfunc(uniqueN(ot_prob))
names(nodecolor)<-as.character(unique(sort(ot_prob)))
nodecolor<-nodecolor[as.character(ot_prob)]
names(nodecolor)<-as.character(hold$num_emp1)
plot(igraph_mat, layout=lay_try, vertex.size=3, vertex.label=NA,
vertex.color=nodecolor[as.character(snapshot$num_emp1)])
